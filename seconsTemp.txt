const Today = document.querySelector('.time-current')
const zoomed = document.querySelector('.zoom-features')
const startTimer = document.querySelector('.stop-w-start')
const stopTimer = document.querySelector('.stop-w-stop')
const resetTimer = document.querySelector('.stop-w-reset')
const TimerRender = document.querySelector('.timer-count')
const TimeZoomBtn = document.querySelector('.time-zoom')
const ZoomCloseBtn = document.querySelector('.closebtn')
const addTaskBtn = document.querySelector('.add-task')
const removetaskBtn = document.querySelector('.remove-task')
const inputContainer = document.querySelector('.task-input-container')
const allInputBoxes= document.querySelector('.task-input-container')
const studyMode = document.querySelector('.study-mode')
const ZoomSeconds = document.querySelector('.zoom-features-seconds')
const ShowSeconds = document.querySelector('.ShowSeconds')
const ToolsBtn = document.querySelector('.tools')
// const snow = document.querySelector('.snow')
// const mainTag = document.querySelector('.Main')
// const addTask = document.querySelector('.addTask')
// const TodayTImeNav = document.querySelector('#time')
let date = new Date()
const month = [`january`,`february`,`march`,`april`,`may`,`june`,`july`,`august`,`september`,`October`,`November`,`December`]
const weekDays = [``,`Monday`,`tuesday`,`Wednesday`,`Thursday`,`Friday`,`Saturdey`,`Sunday`]
const timehr = [`01`,`02`,`03`,`04`,`05`,`06`,`07`,`08`,`09`,`10`,`11`,`12`,`01`,`02`,`03`,`04`,`05`,`06`,`07`,`08`,`09`,`10`,`11`,`12`]
const seconds00 = [`00`,`01`,`02`,`03`,`04`,`05`,`06`,`07`,`08`,`09`]
const monthName = month[date.getMonth()].toLocaleUpperCase()
const dayName = weekDays[date.getDay()].toUpperCase()
const currentDate   = date.getDate()
const fullYear   = date.getFullYear()
let SecondsTimercounter = 0
let MinutesTimercounter = 0
let k = 0
let holdCount = 0
// let holdSecondsCount = 1
let InputContainArray = []
let final = []
// Today.innerHTML =  `${dayName}, ${monthName}   ${currentDate} ${fullYear}` 
let time = new Date()
let currentTime = time.toLocaleTimeString();
// Today.innerHTML =  `${currentTime}`
const updateTime = function(){                          // function updates the time on screen
    let time = new Date()
    // let currentTime = time.toLocaleTimeString();
    let hr = timehr[time.getHours()-1];
    let minutes = time.getMinutes()
    let seconds = time.getSeconds()
    // Today.innerHTML = " "
    if(seconds < 10){
        seconds = seconds00[seconds]
    }
    if(minutes < 10){
        minutes = seconds00[minutes]
    }
    Today.innerHTML =  `${hr}:${minutes}:${seconds}`
    zoomed.innerHTML =  `${hr}:${minutes}`
    ZoomSeconds.innerHTML = `.${seconds}`
    // TodayTImeNav.innerHTML = `${currentTime}`
    // console.log(currentTime);
    // console.log(Today);
}
setInterval(updateTime,10);
let allTasks = JSON.parse(localStorage.getItem('allTasks')) || {}
allTasks.colorChanged = allTasks.colorChanged || ""
allTasks.holdSecondsCount = allTasks.holdSecondsCount || 0
allTasks.valueofn = allTasks.valueofn ? allTasks.valueofn : 1
localStorage.setItem('allTasks',JSON.stringify(allTasks))
studyMode.style['background-color'] = allTasks.colorChanged
ShowSeconds.addEventListener('click',() =>{
    // colorPanel.style.display = 'none'
    // toolsClosebtn.style.display = 'none'
    DpNone()
    if(ShowSeconds.innerHTML == 'show Seconds'){
        allTasks.holdSecondsCount = 1
        ZoomSeconds.style.display = 'block'
        ShowSeconds.style['background-color'] = '#E88D67'
        ShowSeconds.innerHTML = 'Hide Seconds'
    }
    else{
        ZoomSeconds.style.display = 'none'
        allTasks.holdSecondsCount = 0
        ShowSeconds.style['background-color'] = '#77E4C8'

        ShowSeconds.innerHTML = 'show Seconds'
    }
    // secondsOnOff()
    ShowSeconds.style.display = 'none'
})
const secondsOnOff = () =>{
    if(allTasks.holdSecondsCount == 1){
        allTasks.holdSecondsCount = 0
        ZoomSeconds.style.display = 'block'
        ShowSeconds.style['background-color'] = '#E88D67'
        ShowSeconds.innerHTML = 'Hide Seconds'
        
    }
    else{
        ZoomSeconds.style.display = 'none'
        allTasks.holdSecondsCount = 1
        ShowSeconds.style['background-color'] = '#77E4C8'
        ShowSeconds.innerHTML = 'show Seconds'
    }
    localStorage.setItem('allTasks',JSON.stringify(allTasks))
}
secondsOnOff()
// n = allTasks[`valueOfN${n}`] || 1
// n = allTasks.valueofn
// if(allTasks.valueofn == 1 || 2 || 3 || 4 || 5){
//     n = allTasks.valueofn
// }   
// else{
//     allTasks.valueofn = 0
//     n = 1
// }
// n = allTasks.valueofn
// final.append(divReturn)
// console.log(allTasks.div1);
// for (let i = 1; i < allTasks.valueofn; i++) {
//     allInputBoxes.innerHTML += allTasks[`div${i}`]
// }
// if(allTasks[`div${allTasks.valueofn}`] == ""){
//     allInputBoxes.innerHTML = ''
// }
// else{
//     allInputBoxes.innerHTML += allTasks[`div${allTasks.valueofn}`]
// }
// setInterval(() => {
//     if (allTasks.valueofn == 2) {
//         let input11 = document.querySelector('#input1')
//             // console.log(byby.value);
//             input11.value = allTasks.input1
//         } 
//     if (allTasks.valueofn == 3) {
//         let input22 = document.querySelector('#input2')
//             // console.log(byby.value);
//             input22.value = allTasks.input2
//         } 
//     if (allTasks.valueofn == 4) {
//         let input33 = document.querySelector('#input3')
//             // console.log(byby.value);
//             input33.value = allTasks.input3
//         } 
// }, 10);
// const inputOne = document.querySelector('#input1') ? document.querySelector('#input1') : ''
// inputOne.value = allTasks.input1
const repeat = () => {
    
    for (let i = 2; i <= allTasks.valueofn; i++) {
        allInputBoxes.innerHTML +=  allTasks[`div${i}`] 
        let inputK = document.querySelector(`#input${i-1}`)                 
        // inputK.addEventListener
            inputK.addEventListener('input',() => {
                console.log(inputK.value);
                allTasks[`div${i}`] = `<div id=\"input-box-div${i-1}\" class=\"Input-box-div\"><input class=\"input-css\" id=\"input${i-1}\" placeholder=\"${inputK.value}"></div>`
                localStorage.setItem('allTasks',JSON.stringify(allTasks))
                // console.log(input1.value)
                // console.log(input1);
            //     allTasks[`input${allTasks.valueofn-1}`] = inputOne.value
            // allTasks[`div${allTasks.valueofn}`] = `<div id=\"input-box-div${allTasks.valueofn-1}\" class=\"Input-box-div\"><input class=\"input-css\" id=\"input${allTasks.valueofn-1}\" placeholder=\"${input1.value}">${input1.value}</div>`
    })
        console.log(inputK);
        // for(let k = 2;k<= allTasks.valueofn;k++){
        // }
    // let hello = allTasks[`div${allTasks.valueofn}`]
    // console.log(hello);
        
        // let inputOne = document.querySelector(`#input${allTasks.valueofn-1}`)
        // console.log(inputOne);
            // inputOne.innerHTML = allTasks[`input${allTasks.valueofn}`]
        //     console.log(inputOne);

        // if(allTasks.valueofn==2){
                                // })
            // const inputOne0 = document.querySelector('#input2')
            // console.log(inputOne0.value + 'hi');
        // }
        // else if(allTasks.valueofn == 3){
        //     k = 3
        //     if(k==3){
        //     }
        // }
        // else if(allTasks.valueofn==3){
        //     // const inputOne2 = document.querySelector('#input1')
        //     const inputtwo = document.querySelector('#input2')
        //     // inputOne2.value = allTasks.input1
        //     inputtwo.value = allTasks.input2
        // }
        // allTasks.div2.childNodesś = allTasks.input1.value
        // if(allTasks.div2 = "ś
        // console.log(input1.id);

        // input1.addEventListener('input',() => {
            // console.log(input1.value)
            // console.log(input1);
            // allTasks[`input${allTasks.valueofn-1}`] = input1.value 
    // localStorage.setItem('allTasks',JSON.stringify(allTasks))
    }   
    // while(i<6){
    //     allInputBoxes.innerHTML +=  allTasks[`div${allTasks.valueofn}`]
    //     i++ 
    // }
}
repeat();
// console.log(allTasks.inputDiv1);
startTimer.addEventListener('click', () =>{
    // let counter = 0;
    setTimeout(() => {
        document.querySelector('.stop-w-heading').style.opacity="0%"
    }, 1000);
    if(holdCount == 0){
    var  hello =   startOne()
    }
    stopTimer.addEventListener('click', () => {
        clearInterval(hello)
        SecondsTimercounter = +SecondsTimercounter
        holdCount=0
        console.log(SecondsTimercounter);
        // SecondsTimercounter = 0
    })
    resetTimer.addEventListener('click', () => {
        clearInterval(hello);
        SecondsTimercounter = 0
        holdCount = 0
        MinutesTimercounter = 0
        TimerRender.innerHTML = '00:00'
    })
});
const startOne = () => {
    if (MinutesTimercounter == 0 || MinutesTimercounter == '00') {
        MinutesTimercounter = seconds00[+MinutesTimercounter]
        console.log(MinutesTimercounter);
    }
   let thisinterval = setInterval(() => {
        SecondsTimercounter++;
        holdCount++
        console.log(SecondsTimercounter , MinutesTimercounter);
        if(SecondsTimercounter < 10){
            SecondsTimercounter = seconds00[SecondsTimercounter]
            // TimerRender.innerHTML = `${MinutesTimercounter}:${SecondsTimercounter}`
        }
        TimerRender.innerHTML = `${MinutesTimercounter}:${SecondsTimercounter}`
        // console.log(MinutesTimercounter);
        if ( SecondsTimercounter > 59) {
            SecondsTimercounter = 0;
            MinutesTimercounter++;
            if(MinutesTimercounter < 10){
                // TimerRender.innerHTML = `${MinutesTimercounter}:${SecondsTimercounter}`
                MinutesTimercounter = seconds00[MinutesTimercounter]
            }
        }
        if(MinutesTimercounter > 59){
            TimerRender.style.margin = '11rem 0 0 35%';
            document.querySelector(".minutes-heading").style.margin = "13rem 0 0 66%"
            TimerRender.innerHTML = `${MinutesTimercounter}`
        }
        if(MinutesTimercounter > 99){
            TimerRender.style.margin = '11rem 0 0 27%';
            document.querySelector(".minutes-heading").style.margin = "13rem 0 0 76%"
            TimerRender.innerHTML = `${MinutesTimercounter}`
        }
        if(MinutesTimercounter > 999){
            TimerRender.style.margin = '11rem 0 0 22%';
            document.querySelector(".minutes-heading").style.margin = "13rem 0 0 86%"
            TimerRender.innerHTML = `${MinutesTimercounter}`
        }
    },50)
    return thisinterval;
}
TimeZoomBtn.addEventListener('click', () =>{
    studyMode.style.display = 'block'
    // allTasks.colorChanged = 
})
ZoomCloseBtn.addEventListener('click', () =>{
    document.querySelector('.study-mode').style.display = 'none'
})
let closebtnHold = 0
window.addEventListener('mousemove', () =>{                 // window event to control zoom screen flow
    if(closebtnHold == 0){
            closebtnHold = 1   
            btnopacity()
        }
        // document.querySelector('body').style.cursor = ''
        // setTimeout(() => {
        //     document.querySelector('body').style.cursor = 'none'
        // }, 3500);
})
if(allTasks.valueofn>5){
    addTaskBtn.style.display = 'none'
    removetaskBtn.style.margin = '4rem 0 0 4rem'
}
const btnopacity = function (){            // function to control close button opacity
    ZoomCloseBtn.style.opacity= '50%'
    setTimeout(() => {
        ZoomCloseBtn.style.opacity= '0%'
        closebtnHold=0
    },3500);
}
let arrayToremove = []
// inputBoxSelector.forEach((e) => {
//     inputBoxSelector.addEventListener('click', () =>{
//         console.log('hellodsaodo');
//     })
// });
addTaskBtn.addEventListener('click',() =>{                  // button to add tasks. blue  #
    let divReturn =  addInputBox();
    let input1 = document.querySelector(`#input${allTasks.valueofn-1}`)
    // k++
    // allTasks[`div${allTasks.valueofn}`] = divReturn.outerHTML
    allTasks[`div${allTasks.valueofn}`] = `<div id=\"input-box-div${allTasks.valueofn-1}\" class=\"Input-box-div\"><input class=\"input-css\" id=\"input${allTasks.valueofn-1}\" placeholder=\"${input1.value}"></div>`
    localStorage.setItem('allTasks',JSON.stringify(allTasks))
    // console.log(divReturn.childNodes);
    // final = [...divReturn.childNodes]
    // console.log(final[0].id.innerText = ' hello');
    // final[0].innerText = 'hello'
    // console.log(divReturn[0]);
    // console.log(final[0]);
    InputContainArray[allTasks.valueofn-2] = divReturn.childNodes
    console.log(...InputContainArray[allTasks.valueofn-2]);
    // input1.value = allTasks[`input${allTasks.valueofn-1}`]
    // console.log(document.querySelector(`${InputContainArray[0]}`)); 
    // InputContainArray.forEach((e) => {
    //         e.addEventListener('focusout', () => {
    //             console.log(`this works hello yeah ${e}`);
    //         })
    // });
    // if (allTasks.valueofn == 2) {
        // console.log(input1.id);
        input1.addEventListener('input',() => {
            allTasks[`div${allTasks.valueofn}`] = `<div id=\"input-box-div${allTasks.valueofn-1}\" class=\"Input-box-div\"><input class=\"input-css\" id=\"input${allTasks.valueofn-1}\" placeholder=\"${input1.value}"></div>`
            // console.log(input1.value)
            // console.log(input1);
            // console.log(input1.parentNode.outerHTML + input1.value);
            allTasks[`input${allTasks.valueofn-1}`] = input1.value
    localStorage.setItem('allTasks',JSON.stringify(allTasks))

            // input.innerText = input.value
        })
    // }
    // console.log(inputContainer.nextElementSibling.id);
    // console.log(divReturn);
    // console.log(allInputBoxes);
    // allInputBoxes.childNodes.forEach((e) => {
    //     InputContainArray[n] = e?
    //     console.log(...InputContainArray[n].childNodes);
    // })
    // final = [...InputContainArray[n].childNodes]
    // console.log(final[0].id);
    // final.forEach((e) => {
    //     e.id.innerText = 'hello'
    //     e.addEventListener('focusout',()=>{
    //         allTasks[`input${n-1}-value`] = e[0].id.value
    //         localStorage.setItem('allTasks',JSON.stringify(allTasks))
    //     })  
    // });
    // console.log(allTasks);
    // allTasks[`inputDiv${n-1}`] = divReturn.outerHTML
    // allTasks[`input${n-1}`] = final[0].id
    // localStorage.setItem('allTasks',JSON.stringify(allTasks))
    // arrayToremove[n-2] = inputIdtoRemove.id
    // newArray = [...arrayToremove]
    // console.log(newArray);
    if(allTasks.valueofn>5){
        addTaskBtn.style.display = 'none'
        removetaskBtn.style.margin = '4rem 0 0 4rem'
    }    
    // console.log(arrayToremove);
    // console.log(inputIdtoRemove.id + 'athis is ti');
    // inputContainer.append(inputBox)
})
// const repeat2 = () =>{
//     for(let b= 1; b<= 5; b++){
//         let inputk = document.querySelector('#input' + `${b}`)
//         inputk.value = allTasks[`input${b}`]
//         console.log(inputk.value);
//     }
// }
removetaskBtn.addEventListener('click',()=>{                                // button to remove tasks red  #
    // conso[le.log((document.querySelector(`#input-box-div${n-1}`)).id);
        inputContainer.removeChild((document.querySelector(`#input-box-div${allTasks.valueofn-1}`)))    
    // localStorage.removeItem(allTasks[`inputDiv${1}`])
    k--
    JSON.parse(localStorage.getItem('allTasks'))
    allTasks[`div${allTasks.valueofn}`] = ''
        allTasks.valueofn--
        allTasks[`input${allTasks.valueofn}`] = ""
        localStorage.setItem('allTasks',JSON.stringify(allTasks))
        allInputBoxes.innerHTML = ''
        repeat();
        // repeat2();
    // localStorage.setItem('allTasks',JSON.stringify(allTasks))
    if(allTasks.valueofn<6){
        removetaskBtn.style.margin = '4rem 0 0 11.7rem'
        addTaskBtn.style.display = 'block'
    }
})
const addInputBox = () =>{                  // function to create inout div #
    if(allTasks.valueofn<6){
        let inputDiv = document.createElement('div')
        inputDiv.setAttribute('id',`input-box-div${allTasks.valueofn}`)
        let inputBox = document.createElement('input')
        inputBox.classList.add('input-css')
        inputBox.setAttribute('id',`input${allTasks.valueofn}`)
        inputBox.placeholder = 'Type...............................'
        inputDiv.classList.add('Input-box-div')
        inputContainer.append(inputDiv)
        inputDiv.appendChild(inputBox)
        // console.log(inputDiv.id);
        allTasks.valueofn++
        localStorage.setItem('allTasks',JSON.stringify(allTasks))
        // console.log(n);
        return inputDiv
    }
}
// const inputBoxSelector = document.querySelectorAll(`#input${allTasks.valueofn}`)
// let input2 = document.querySelector('#input2')
// let input3 = document.querySelector('#input3')
// let input4 = document.querySelector('#input4')
// let input5 = document.querySelector('#input5')
// let input = [input1,input2]
// for (let i = 1; i < 3; i++){
//     // let input = ['#input1']
//     input[i].addEventListener('focusout',() => {
//         console.log('helo');
//     })
// }
// oxSelector.forEach(e =>{
//     e.addEventListener('click',() =>{
//         console.log('jasljdl');
//     })
// })
const colorPalet = document.querySelectorAll('.color1')
const colorPanel = document.querySelector('.color-panel')
colorPanel.style.display = 'none'
colorPalet.forEach((e) =>{
    e.style.display = 'none'    
})
const DpNone = function() {
    colorPanel.style.display = 'none'
    ShowSeconds.style.display = 'none'
    snowControl.style.display = 'none'
    toolsClosebtn.style.display = 'none'
}
const toolsClosebtn = document.querySelector('.Close-tools')
ToolsBtn.addEventListener('click',() =>{
    colorPalet.forEach((e) =>{
        e.style.display = 'block'
    })
    colorPanel.style.display = 'flex'
    snowControl.style.display = 'block'
    ShowSeconds.style.display = 'block'
    toolsClosebtn.style.display = 'block'
    toolsClosebtn.addEventListener('click' ,() =>{
        DpNone()
    })
    // ToolsBtn.style.opacity ='0'
})
colorPalet.forEach((e) =>{
    console.log(e.innerHTML);
    e.addEventListener('click',() =>{
        studyMode.style['background-color'] = e.innerHTML   
        DpNone()
        console.log('changed');

        allTasks.colorChanged = e.innerHTML
        localStorage.setItem('allTasks',JSON.stringify(allTasks))
    })
    e.style['background-color'] = e.innerHTML
})\




























snow function :_





























Date.now ||
    (Date.now = function () {
        return new Date().getTime();
    }),
    (function () {
        "use strict";
        for (
            var e = ["webkit", "moz"], t = 0;
            t < e.length && !window.requestAnimationFrame;
            ++t
        ) {
            var i = e[t];
            (window.requestAnimationFrame =
                window[i + "RequestAnimationFrame"]),
                (window.cancelAnimationFrame =
                    window[i + "CancelAnimationFrame"] ||
                    window[i + "CancelRequestAnimationFrame"]);
        }
        if (
            /iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) ||
            !window.requestAnimationFrame ||
            !window.cancelAnimationFrame
        ) {
            var n = 0;
            (window.requestAnimationFrame = function (e) {
                var t = Date.now(),
                    i = Math.max(n + 16, t);
                return setTimeout(function () {
                    e((n = i));
                }, i - t);
            }),
                (window.cancelAnimationFrame = clearTimeout);
        }
    })();
var snowFall = (function () {
    function e() {
        var e = {
                flakeCount: 100,
                flakeColor: "#ffffff",
                flakeIndex: 999999,
                flakePosition: "absolute",
                minSize: 1,
                maxSize: 4,
                minSpeed: 1,
                maxSpeed: 4,
                round: 1,
                shadow: !1,
                collection: !1,
                image: !1,
                collectionHeight: 40,
            },
            t = [],
            n = {},
            o = 0,
            s = 0,
            a = 0,
            r = 0,
            l = function (e, t) {
                for (var i in t) e.hasOwnProperty(i) && (e[i] = t[i]);
            },
            h = function (e, t) {
                (e.style.webkitTransform = t),
                    (e.style.MozTransform = t),
                    (e.style.msTransform = t),
                    (e.style.OTransform = t),
                    (e.style.transform = t);
            },
            m = function (e, t) {
                return Math.round(e + Math.random() * (t - e));
            },
            f = function (e, t) {
                for (var i in t)
                    e.style[i] =
                        t[i] + ("width" == i || "height" == i ? "px" : "");
            },
            d = function (t, i, n) {
                (this.x = m(a, s - a)),
                    (this.y = m(0, o)),
                    (this.size = i),
                    (this.speed = n),
                    (this.step = 0),
                    (this.stepSize = m(1, 10) / 100),
                    e.collection &&
                        (this.target =
                            canvasCollection[
                                m(0, canvasCollection.length - 1)
                            ]);
                var r = null;
                e.image
                    ? ((r = new Image()), (r.src = e.image))
                    : ((r = document.createElement("div")),
                      f(r, { background: e.flakeColor })),
                    (r.className = "snowfall-flakes"),
                    f(r, {
                        width: this.size,
                        height: this.size,
                        position: e.flakePosition,
                        top: 0,
                        left: 0,
                        "will-change": "transform",
                        fontSize: 0,
                        zIndex: e.flakeIndex,
                    }),
                    e.round &&
                        f(r, {
                            "-moz-border-radius": ~~e.maxSize + "px",
                            "-webkit-border-radius": ~~e.maxSize + "px",
                            borderRadius: ~~e.maxSize + "px",
                        }),
                    e.shadow &&
                        f(r, {
                            "-moz-box-shadow": "1px 1px 1px #555",
                            "-webkit-box-shadow": "1px 1px 1px #555",
                            boxShadow: "1px 1px 1px #555",
                        }),
                    t.tagName === document.body.tagName
                        ? document.body.appendChild(r)
                        : t.appendChild(r),
                    (this.element = r),
                    (this.update = function () {
                        (this.y += this.speed),
                            this.y > o - (this.size + 6) && this.reset(),
                            h(
                                this.element,
                                "translateY(" +
                                    this.y +
                                    "px) translateX(" +
                                    this.x +
                                    "px)"
                            ),
                            (this.step += this.stepSize),
                            (this.x += Math.cos(this.step)),
                            (this.x + this.size > s - a || this.x < a) &&
                                this.reset();
                    }),
                    (this.reset = function () {
                        (this.y = 0),
                            (this.x = m(a, s - a)),
                            (this.stepSize = m(1, 10) / 100),
                            (this.size =
                                m(100 * e.minSize, 100 * e.maxSize) / 100),
                            (this.element.style.width = this.size + "px"),
                            (this.element.style.height = this.size + "px"),
                            (this.speed = m(e.minSpeed, e.maxSpeed));
                    });
            },
            w = function () {
                for (var e = 0; e < t.length; e += 1) t[e].update();
                r = requestAnimationFrame(function () {
                    w();
                });
            };
        return {
            snow: function (r, h) {
                for (
                    l(e, h),
                        n = r,
                        o = n.offsetHeight,
                        s = n.offsetWidth,
                        n.snow = this,
                        "body" === n.tagName.toLowerCase() && (a = 25),
                        window.addEventListener(
                            "resize",
                            function () {
                                (o = n.clientHeight), (s = n.offsetWidth);
                            },
                            !0
                        ),
                        i = 0;
                    i < e.flakeCount;
                    i += 1
                )
                    t.push(
                        new d(
                            n,
                            m(100 * e.minSize, 100 * e.maxSize) / 100,
                            m(e.minSpeed, e.maxSpeed)
                        )
                    );
                w();
            },
            clear: function () {
                var e = null;
                e = n.getElementsByClassName
                    ? n.getElementsByClassName("snowfall-flakes")
                    : n.querySelectorAll(".snowfall-flakes");
                for (var t = e.length; t--; )
                    e[t].parentNode === n && n.removeChild(e[t]);
                cancelAnimationFrame(r);
            },
        };
    }
    return {
        snow: function (t, i) {
            if ("string" == typeof i)
                if (t.length > 0)
                    for (var n = 0; n < t.length; n++)
                        t[n].snow && t[n].snow.clear();
                else t.snow.clear();
            else if (t.length > 0)
                for (var n = 0; n < t.length; n++) new e().snow(t[n], i);
            else new e().snow(t, i);
        },
    };
})();
const body = document.querySelector('body')
const snowControl = document.querySelector('.snow-On-Off')
snowFall.snow(body)
const clearSnow = () =>{
    let snowFlakesSelected = document.querySelectorAll(".snowfall-flakes")
    console.log(snowFlakesSelected.length);
    snowFlakesSelected.forEach((e) =>{
        e.remove()
        // console.log(e);
        // console.log(e.previousElementSibling.nextElementSibling);
        // e.previousElementSibling.nextElementSibling.remove()
        // e.parentNode.removeChild('.snowfall-flakes')
        // e.style.display = 'none'
        // e.style['will-change'] = 'auto'
        // e.style['background'] = 'transparent'
// snowFall.snow(document.querySelector('body'))    
    // console.log(snowFlakesSelected = 0);
})}
// clearSnow() 
// snowFall.snow(document.querySelector('body'))
// snowFall.snow(document.querySelector('.snow2'),{
//     flakeCount: 10,
// })
let snox = 0
snowControl.addEventListener('click' ,() =>{
    console.log(snox);
    toolsClosebtn.style.display ='none'
    colorPanel.style.display = 'none'
    ShowSeconds.style.display = 'none'
    if(snox == 0){
        clearSnow()
    snowControl.innerHTML = 'Snow ON'
    snowControl.style['background-color'] = '#3ABEF9'
    snox = 1
    snowControl.style.display = 'none'
}
else if(snox == 1){
    snox = 0
    snowControl.style['background-color'] = 'orange'
        snowControl.style.display = 'none'
        snowFall.snow(body)
    snowControl.innerHTML = 'Snow OFF'

    }
})